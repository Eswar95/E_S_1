# peCE_ticks.py
from kiteconnect import KiteConnect, KiteTicker
from config import KiteAPI, Kite_Access_Token, Kite_UserID
import pandas as pd
import datetime as dt
import pytz, os

IST = pytz.timezone("Asia/Kolkata")

# Initialize Kite
kite = KiteConnect(api_key=KiteAPI)
kite.set_access_token(Kite_Access_Token)

# ---- Load CE & PE instruments from CSVs (generated by peCE.py) ----
df_ce = pd.read_csv("nifty_ce_open_close.csv")
df_pe = pd.read_csv("nifty_pe_open_close.csv")

df_all = pd.concat([df_ce, df_pe], ignore_index=True)

tokens = list(df_all["instrument_token"])
symbol_map = dict(zip(df_all["instrument_token"], df_all["tradingsymbol"]))

# ---- Save location (with daily prefix) ----
folder = "nifty_data"
os.makedirs(folder, exist_ok=True)
today_str = dt.date.today().strftime("%Y-%m-%d")

def on_ticks(ws, ticks):
    for tick in ticks:
        ts = tick.get("timestamp", dt.datetime.utcnow()).astimezone(IST)
        token = tick["instrument_token"]
        symbol = symbol_map[token]

        # File for this instrument
        file_path = os.path.join(folder, f"{today_str}_{symbol}.csv")

        # Tick row
        tick_row = {
            "time": ts,
            "last_price": tick["last_price"],
            "volume": tick.get("volume"),
            "oi": tick.get("oi"),
        }

        # Save tick
        df = pd.DataFrame([tick_row])
        if os.path.exists(file_path):
            df.to_csv(file_path, mode="a", header=False, index=False)
        else:
            df.to_csv(file_path, index=False)

        print(f"âœ… Saved tick for {symbol} at {ts} -> {tick['last_price']}")

def on_connect(ws, resp):
    print("ðŸ”— Subscribing to CE & PE option ticks...")
    ws.subscribe(tokens)
    ws.set_mode(ws.MODE_FULL, tokens)

def run_ws():
    kws = KiteTicker(KiteAPI, Kite_Access_Token, Kite_UserID)
    kws.on_ticks = on_ticks
    kws.on_connect = on_connect
    kws.connect(threaded=True, disable_ssl_verification=False)

    while True:
        pass  # keep alive

if __name__ == "__main__":
    run_ws()
